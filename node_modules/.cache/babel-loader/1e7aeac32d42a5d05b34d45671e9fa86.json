{"ast":null,"code":"import _slicedToArray from \"/Users/fernandocamargodelbuono/_dev/flesh-cage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useCallback, useState } from 'react';\nexport var useRepos = function useRepos() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      repos = _useState4[0],\n      setRepos = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      error = _useState6[0],\n      setError = _useState6[1];\n\n  var fetch = useCallback(function (_ref) {\n    var keywords = _ref.keywords;\n    setLoading(true);\n    setError(null);\n    return window.fetch(\"https://api.github.com/search/repositories?q=\".concat(keywords)).then(function (response) {\n      var headers = response.headers;\n      console.log(headers.get('link').split(',').map(function (link) {\n        var _link$match = link.match(/\\d+/),\n            _link$match2 = _slicedToArray(_link$match, 1),\n            page = _link$match2[0];\n\n        var _link$match3 = link.match(/rel=\\s*\"?([^\"]+)\"?/),\n            _link$match4 = _slicedToArray(_link$match3, 2),\n            type = _link$match4[1];\n\n        return {\n          type,\n          page: Number(page)\n        };\n      }));\n      return response.json();\n    }).then(function (_ref2) {\n      var repos = _ref2.items;\n      return setRepos(repos);\n    }).finally(function () {\n      return setLoading(false);\n    });\n  }, []);\n  return {\n    fetch,\n    loading,\n    repos,\n    error\n  };\n};","map":{"version":3,"sources":["/Users/fernandocamargodelbuono/_dev/flesh-cage/src/components/app/hooks.js"],"names":["useCallback","useState","useRepos","loading","setLoading","repos","setRepos","error","setError","fetch","keywords","window","then","response","headers","console","log","get","split","map","link","match","page","type","Number","json","items","finally"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAEA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAAA,kBACED,QAAQ,CAAC,KAAD,CADV;AAAA;AAAA,MACrBE,OADqB;AAAA,MACZC,UADY;;AAAA,mBAEFH,QAAQ,CAAC,EAAD,CAFN;AAAA;AAAA,MAErBI,KAFqB;AAAA,MAEdC,QAFc;;AAAA,mBAGFL,QAAQ,CAAC,IAAD,CAHN;AAAA;AAAA,MAGrBM,KAHqB;AAAA,MAGdC,QAHc;;AAI5B,MAAMC,KAAK,GAAGT,WAAW,CAAC,gBAAkB;AAAA,QAAfU,QAAe,QAAfA,QAAe;AAC1CN,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAI,IAAAA,QAAQ,CAAC,IAAD,CAAR;AAEA,WAAOG,MAAM,CACVF,KADI,wDACkDC,QADlD,GAEJE,IAFI,CAEC,UAAAC,QAAQ,EAAI;AAAA,UACRC,OADQ,GACID,QADJ,CACRC,OADQ;AAGhBC,MAAAA,OAAO,CAACC,GAAR,CACEF,OAAO,CACJG,GADH,CACO,MADP,EAEGC,KAFH,CAES,GAFT,EAGGC,GAHH,CAGO,UAAAC,IAAI,EAAI;AAAA,0BACIA,IAAI,CAACC,KAAL,CAAW,KAAX,CADJ;AAAA;AAAA,YACJC,IADI;;AAAA,2BAEMF,IAAI,CAACC,KAAL,CAAW,oBAAX,CAFN;AAAA;AAAA,YAEFE,IAFE;;AAIX,eAAO;AAAEA,UAAAA,IAAF;AAAQD,UAAAA,IAAI,EAAEE,MAAM,CAACF,IAAD;AAApB,SAAP;AACD,OARH,CADF;AAYA,aAAOT,QAAQ,CAACY,IAAT,EAAP;AACD,KAlBI,EAmBJb,IAnBI,CAmBC;AAAA,UAAUP,KAAV,SAAGqB,KAAH;AAAA,aAAsBpB,QAAQ,CAACD,KAAD,CAA9B;AAAA,KAnBD,EAoBJsB,OApBI,CAoBI;AAAA,aAAMvB,UAAU,CAAC,KAAD,CAAhB;AAAA,KApBJ,CAAP;AAqBD,GAzBwB,EAyBtB,EAzBsB,CAAzB;AA2BA,SAAO;AAAEK,IAAAA,KAAF;AAASN,IAAAA,OAAT;AAAkBE,IAAAA,KAAlB;AAAyBE,IAAAA;AAAzB,GAAP;AACD,CAhCM","sourcesContent":["import { useCallback, useState } from 'react';\n\nexport const useRepos = () => {\n  const [loading, setLoading] = useState(false);\n  const [repos, setRepos] = useState([]);\n  const [error, setError] = useState(null);\n  const fetch = useCallback(({ keywords }) => {\n    setLoading(true);\n    setError(null);\n\n    return window\n      .fetch(`https://api.github.com/search/repositories?q=${keywords}`)\n      .then(response => {\n        const { headers } = response;\n\n        console.log(\n          headers\n            .get('link')\n            .split(',')\n            .map(link => {\n              const [page] = link.match(/\\d+/);\n              const [, type] = link.match(/rel=\\s*\"?([^\"]+)\"?/);\n\n              return { type, page: Number(page) };\n            })\n        );\n\n        return response.json();\n      })\n      .then(({ items: repos }) => setRepos(repos))\n      .finally(() => setLoading(false));\n  }, []);\n\n  return { fetch, loading, repos, error };\n};\n"]},"metadata":{},"sourceType":"module"}