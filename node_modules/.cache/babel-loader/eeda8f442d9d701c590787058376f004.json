{"ast":null,"code":"import _slicedToArray from \"/Users/fernandocamargodelbuono/_dev/flesh-cage/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useCallback, useState } from 'react';\n\nvar parse = function parse(stack, link) {\n  var _link$match = link.match(/\\d+/),\n      _link$match2 = _slicedToArray(_link$match, 1),\n      page = _link$match2[0];\n\n  var _link$match3 = link.match(/rel=\\s*\"?([^\"]+)\"?/),\n      _link$match4 = _slicedToArray(_link$match3, 2),\n      type = _link$match4[1];\n\n  return Object.assign(stack, {\n    [type]: Number(page)\n  });\n};\n\nvar getPaginationFrom = function getPaginationFrom(_ref) {\n  var headers = _ref.headers;\n  return Promise.resolve(headers.get('link').split(',').reduce(parse, {}));\n};\n\nexport var useRepos = function useRepos() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      repos = _useState4[0],\n      setRepos = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      error = _useState6[0],\n      setError = _useState6[1];\n\n  var fetch = useCallback(function (_ref2) {\n    var keywords = _ref2.keywords;\n    setLoading(true);\n    setError(null);\n    return window.fetch(\"https://api.github.com/search/repositories?q=\".concat(keywords)).then(function (response) {\n      return Promise.all([response.json(), getPaginationFrom(response)]);\n    }).then(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 1),\n          repos = _ref4[0].items;\n\n      return setRepos(repos);\n    }).finally(function () {\n      return setLoading(false);\n    });\n  }, []);\n  return {\n    fetch,\n    loading,\n    repos,\n    error\n  };\n};","map":{"version":3,"sources":["/Users/fernandocamargodelbuono/_dev/flesh-cage/src/components/app/hooks.js"],"names":["useCallback","useState","parse","stack","link","match","page","type","Object","assign","Number","getPaginationFrom","headers","Promise","resolve","get","split","reduce","useRepos","loading","setLoading","repos","setRepos","error","setError","fetch","keywords","window","then","response","all","json","items","finally"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAQC,IAAR,EAAiB;AAAA,oBACdA,IAAI,CAACC,KAAL,CAAW,KAAX,CADc;AAAA;AAAA,MACtBC,IADsB;;AAAA,qBAEZF,IAAI,CAACC,KAAL,CAAW,oBAAX,CAFY;AAAA;AAAA,MAEpBE,IAFoB;;AAI7B,SAAOC,MAAM,CAACC,MAAP,CAAcN,KAAd,EAAqB;AAAE,KAACI,IAAD,GAAQG,MAAM,CAACJ,IAAD;AAAhB,GAArB,CAAP;AACD,CALD;;AAOA,IAAMK,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA,MAAGC,OAAH,QAAGA,OAAH;AAAA,SACxBC,OAAO,CAACC,OAAR,CACEF,OAAO,CACJG,GADH,CACO,MADP,EAEGC,KAFH,CAES,GAFT,EAGGC,MAHH,CAGUf,KAHV,EAGiB,EAHjB,CADF,CADwB;AAAA,CAA1B;;AAQA,OAAO,IAAMgB,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAAA,kBACEjB,QAAQ,CAAC,KAAD,CADV;AAAA;AAAA,MACrBkB,OADqB;AAAA,MACZC,UADY;;AAAA,mBAEFnB,QAAQ,CAAC,EAAD,CAFN;AAAA;AAAA,MAErBoB,KAFqB;AAAA,MAEdC,QAFc;;AAAA,mBAGFrB,QAAQ,CAAC,IAAD,CAHN;AAAA;AAAA,MAGrBsB,KAHqB;AAAA,MAGdC,QAHc;;AAI5B,MAAMC,KAAK,GAAGzB,WAAW,CAAC,iBAAkB;AAAA,QAAf0B,QAAe,SAAfA,QAAe;AAC1CN,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAI,IAAAA,QAAQ,CAAC,IAAD,CAAR;AAEA,WAAOG,MAAM,CACVF,KADI,wDACkDC,QADlD,GAEJE,IAFI,CAEC,UAAAC,QAAQ;AAAA,aACZhB,OAAO,CAACiB,GAAR,CAAY,CAACD,QAAQ,CAACE,IAAT,EAAD,EAAkBpB,iBAAiB,CAACkB,QAAD,CAAnC,CAAZ,CADY;AAAA,KAFT,EAKJD,IALI,CAKC;AAAA;AAAA,UAAWP,KAAX,YAAIW,KAAJ;;AAAA,aAAwBV,QAAQ,CAACD,KAAD,CAAhC;AAAA,KALD,EAMJY,OANI,CAMI;AAAA,aAAMb,UAAU,CAAC,KAAD,CAAhB;AAAA,KANJ,CAAP;AAOD,GAXwB,EAWtB,EAXsB,CAAzB;AAaA,SAAO;AAAEK,IAAAA,KAAF;AAASN,IAAAA,OAAT;AAAkBE,IAAAA,KAAlB;AAAyBE,IAAAA;AAAzB,GAAP;AACD,CAlBM","sourcesContent":["import { useCallback, useState } from 'react';\n\nconst parse = (stack, link) => {\n  const [page] = link.match(/\\d+/);\n  const [, type] = link.match(/rel=\\s*\"?([^\"]+)\"?/);\n\n  return Object.assign(stack, { [type]: Number(page) });\n};\n\nconst getPaginationFrom = ({ headers }) =>\n  Promise.resolve(\n    headers\n      .get('link')\n      .split(',')\n      .reduce(parse, {})\n  );\n\nexport const useRepos = () => {\n  const [loading, setLoading] = useState(false);\n  const [repos, setRepos] = useState([]);\n  const [error, setError] = useState(null);\n  const fetch = useCallback(({ keywords }) => {\n    setLoading(true);\n    setError(null);\n\n    return window\n      .fetch(`https://api.github.com/search/repositories?q=${keywords}`)\n      .then(response =>\n        Promise.all([response.json(), getPaginationFrom(response)])\n      )\n      .then(([{ items: repos }]) => setRepos(repos))\n      .finally(() => setLoading(false));\n  }, []);\n\n  return { fetch, loading, repos, error };\n};\n"]},"metadata":{},"sourceType":"module"}