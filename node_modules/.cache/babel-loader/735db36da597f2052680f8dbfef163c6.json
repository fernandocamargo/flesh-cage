{"ast":null,"code":"/*jslint node: true*/\nvar toArray = require('lodash.toarray');\n\nvar emojiByName = require('./emoji.json');\n\n\"use strict\";\n/**\n * regex to parse emoji in a string - finds emoji, e.g. :coffee:\n */\n\n\nvar emojiNameRegex = /:([a-zA-Z0-9_\\-\\+]+):/g;\n/**\n * regex to trim whitespace\n * use instead of String.prototype.trim() for IE8 support\n */\n\nvar trimSpaceRegex = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n/**\n * Removes colons on either side\n * of the string if present\n * @param  {string} str\n * @return {string}\n */\n\nfunction stripColons(str) {\n  var colonIndex = str.indexOf(':');\n\n  if (colonIndex > -1) {\n    // :emoji: (http://www.emoji-cheat-sheet.com/)\n    if (colonIndex === str.length - 1) {\n      str = str.substring(0, colonIndex);\n      return stripColons(str);\n    } else {\n      str = str.substr(colonIndex + 1);\n      return stripColons(str);\n    }\n  }\n\n  return str;\n}\n/**\n * Adds colons to either side\n * of the string\n * @param {string} str\n * @return {string}\n */\n\n\nfunction wrapColons(str) {\n  return typeof str === 'string' && str.length > 0 ? ':' + str + ':' : str;\n}\n/**\n * Ensure that the word is wrapped in colons\n * by only adding them, if they are not there.\n * @param {string} str\n * @return {string}\n */\n\n\nfunction ensureColons(str) {\n  return typeof str === 'string' && str[0] !== ':' ? wrapColons(str) : str;\n} // Non spacing mark, some emoticons have them. It's the 'Variant Form',\n// which provides more information so that emoticons can be rendered as\n// more colorful graphics. FE0E is a unicode text version, where as FE0F\n// should be rendered as a graphical version. The code gracefully degrades.\n\n\nvar NON_SPACING_MARK = String.fromCharCode(65039); // 65039 - '️' - 0xFE0F;\n\nvar nonSpacingRegex = new RegExp(NON_SPACING_MARK, 'g'); // Remove the non-spacing-mark from the code, never send a stripped version\n// to the client, as it kills graphical emoticons.\n\nfunction stripNSB(code) {\n  return code.replace(nonSpacingRegex, '');\n}\n\n; // Reversed hash table, where as emojiByName contains a { heart: '❤' }\n// dictionary emojiByCode contains { ❤: 'heart' }. The codes are normalized\n// to the text version.\n\nvar emojiByCode = Object.keys(emojiByName).reduce(function (h, k) {\n  h[stripNSB(emojiByName[k])] = k;\n  return h;\n}, {});\n/**\n * Emoji namespace\n */\n\nvar Emoji = {\n  emoji: emojiByName\n};\n/**\n * get emoji code from name\n * @param  {string} emoji\n * @return {string}\n */\n\nEmoji._get = function _get(emoji) {\n  if (emojiByName.hasOwnProperty(emoji)) {\n    return emojiByName[emoji];\n  }\n\n  return ensureColons(emoji);\n};\n/**\n * get emoji code from :emoji: string or name\n * @param  {string} emoji\n * @return {string}\n */\n\n\nEmoji.get = function get(emoji) {\n  emoji = stripColons(emoji);\n  return Emoji._get(emoji);\n};\n/**\n * find the emoji by either code or name\n * @param {string} nameOrCode The emoji to find, either `coffee`, `:coffee:` or `☕`;\n * @return {object}\n */\n\n\nEmoji.find = function find(nameOrCode) {\n  return Emoji.findByName(nameOrCode) || Emoji.findByCode(nameOrCode);\n};\n/**\n * find the emoji by name\n * @param {string} name The emoji to find either `coffee` or `:coffee:`;\n * @return {object}\n */\n\n\nEmoji.findByName = function findByName(name) {\n  var stripped = stripColons(name);\n  var emoji = emojiByName[stripped];\n  return emoji ? {\n    emoji: emoji,\n    key: stripped\n  } : undefined;\n};\n/**\n * find the emoji by code (emoji)\n * @param {string} code The emoji to find; for example `☕` or `☔`\n * @return {object}\n */\n\n\nEmoji.findByCode = function findByCode(code) {\n  var stripped = stripNSB(code);\n  var name = emojiByCode[stripped]; // lookup emoji to ensure the Variant Form is returned\n\n  return name ? {\n    emoji: emojiByName[name],\n    key: name\n  } : undefined;\n};\n/**\n * Check if an emoji is known by this library\n * @param {string} nameOrCode The emoji to validate, either `coffee`, `:coffee:` or `☕`;\n * @return {object}\n */\n\n\nEmoji.hasEmoji = function hasEmoji(nameOrCode) {\n  return Emoji.hasEmojiByName(nameOrCode) || Emoji.hasEmojiByCode(nameOrCode);\n};\n/**\n * Check if an emoji with given name is known by this library\n * @param {string} name The emoji to validate either `coffee` or `:coffee:`;\n * @return {object}\n */\n\n\nEmoji.hasEmojiByName = function hasEmojiByName(name) {\n  var result = Emoji.findByName(name);\n  return !!result && result.key === stripColons(name);\n};\n/**\n * Check if a given emoji is known by this library\n * @param {string} code The emoji to validate; for example `☕` or `☔`\n * @return {object}\n */\n\n\nEmoji.hasEmojiByCode = function hasEmojiByCode(code) {\n  var result = Emoji.findByCode(code);\n  return !!result && stripNSB(result.emoji) === stripNSB(code);\n};\n/**\n * get emoji name from code\n * @param  {string} emoji\n * @param  {boolean} includeColons should the result include the ::\n * @return {string}\n */\n\n\nEmoji.which = function which(emoji_code, includeColons) {\n  var code = stripNSB(emoji_code);\n  var word = emojiByCode[code];\n  return includeColons ? wrapColons(word) : word;\n};\n/**\n * emojify a string (replace :emoji: with an emoji)\n * @param  {string} str\n * @param  {function} on_missing (gets emoji name without :: and returns a proper emoji if no emoji was found)\n * @param  {function} format (wrap the returned emoji in a custom element)\n * @return {string}\n */\n\n\nEmoji.emojify = function emojify(str, on_missing, format) {\n  if (!str) return '';\n  return str.split(emojiNameRegex) // parse emoji via regex\n  .map(function parseEmoji(s, i) {\n    // every second element is an emoji, e.g. \"test :fast_forward:\" -> [ \"test \", \"fast_forward\" ]\n    if (i % 2 === 0) return s;\n\n    var emoji = Emoji._get(s);\n\n    var isMissing = emoji.indexOf(':') > -1;\n\n    if (isMissing && typeof on_missing === 'function') {\n      return on_missing(s);\n    }\n\n    if (!isMissing && typeof format === 'function') {\n      return format(emoji, s);\n    }\n\n    return emoji;\n  }).join('') // convert back to string\n  ;\n};\n/**\n * return a random emoji\n * @return {string}\n */\n\n\nEmoji.random = function random() {\n  var emojiKeys = Object.keys(emojiByName);\n  var randomIndex = Math.floor(Math.random() * emojiKeys.length);\n  var key = emojiKeys[randomIndex];\n\n  var emoji = Emoji._get(key);\n\n  return {\n    key: key,\n    emoji: emoji\n  };\n};\n/**\n *  return an collection of potential emoji matches\n *  @param {string} str\n *  @return {Array.<Object>}\n */\n\n\nEmoji.search = function search(str) {\n  var emojiKeys = Object.keys(emojiByName);\n  var matcher = stripColons(str);\n  var matchingKeys = emojiKeys.filter(function (key) {\n    return key.toString().indexOf(matcher) === 0;\n  });\n  return matchingKeys.map(function (key) {\n    return {\n      key: key,\n      emoji: Emoji._get(key)\n    };\n  });\n};\n/**\n * unemojify a string (replace emoji with :emoji:)\n * @param  {string} str\n * @return {string}\n */\n\n\nEmoji.unemojify = function unemojify(str) {\n  if (!str) return '';\n  var words = toArray(str);\n  return words.map(function (word) {\n    return Emoji.which(word, true) || word;\n  }).join('');\n};\n/**\n * replace emojis with replacement value\n * @param {string} str\n * @param {function|string} the string or callback function to replace the emoji with\n * @param {boolean} should trailing whitespaces be cleaned? Defaults false\n * @return {string}\n */\n\n\nEmoji.replace = function replace(str, replacement, cleanSpaces) {\n  if (!str) return '';\n  var replace = typeof replacement === 'function' ? replacement : function () {\n    return replacement;\n  };\n  var words = toArray(str);\n  var replaced = words.map(function (word, idx) {\n    var emoji = Emoji.findByCode(word);\n\n    if (emoji && cleanSpaces && words[idx + 1] === ' ') {\n      words[idx + 1] = '';\n    }\n\n    return emoji ? replace(emoji) : word;\n  }).join('');\n  return cleanSpaces ? replaced.replace(trimSpaceRegex, '') : replaced;\n};\n/**\n * remove all emojis from a string\n * @param {string} str\n * @return {string}\n */\n\n\nEmoji.strip = function strip(str) {\n  return Emoji.replace(str, '', true);\n};\n\nmodule.exports = Emoji;","map":null,"metadata":{},"sourceType":"script"}